#!/usr/bin/env python3
"""
Complete demonstration script for ft_linear_regression project.
This script demonstrates all the required functionalities:
1. Plotting the data distribution
2. Plotting the linear regression line
3. Calculating the precision of the algorithm
"""

import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import numpy as np
from utils.load_csv import load_csv
from const import THETA0, THETA1, MEAN_KM, STD_KM, MEAN_PRICE, STD_PRICE

def demonstrate_complete_pipeline():
    """
    Complete demonstration of the linear regression project.
    """
    print("üöÄ D√âMONSTRATION COMPL√àTE DU PROJET ft_linear_regression")
    print("=" * 65)
    
    # Load data
    data = load_csv("../data/data.csv")
    if data is None or len(data) == 0:
        print("‚ùå Erreur: Impossible de charger les donn√©es")
        return
    
    mileage = data['km'].values
    actual_prices = data['price'].values
    
    print(f"üìä Donn√©es charg√©es: {len(mileage)} points")
    print(f"   Kilom√©trage: {np.min(mileage):.0f} - {np.max(mileage):.0f} km")
    print(f"   Prix: {np.min(actual_prices):.0f} - {np.max(actual_prices):.0f} ‚Ç¨")
    
    # ========================================================================
    # 1. PLOTTING THE DATA DISTRIBUTION
    # ========================================================================
    print("\nüìà 1. VISUALISATION DE LA R√âPARTITION DES DONN√âES")
    print("-" * 50)
    
    # Calculate predictions for plotting
    predictions = []
    for km in mileage:
        km_normalized = (km - MEAN_KM) / STD_KM
        price_normalized = THETA0 + (THETA1 * km_normalized)
        pred_price = price_normalized * STD_PRICE + MEAN_PRICE
        predictions.append(pred_price)
    predictions = np.array(predictions)
    
    # Create comprehensive data visualization
    fig = plt.figure(figsize=(16, 12))
    
    # Main scatter plot showing data distribution
    ax1 = plt.subplot(2, 3, 1)
    scatter = plt.scatter(mileage, actual_prices, c=actual_prices, cmap='viridis', 
                         alpha=0.8, s=80, edgecolors='black', linewidth=0.5)
    plt.colorbar(scatter, label='Prix (‚Ç¨)')
    plt.xlabel('Kilom√©trage (km)', fontsize=11)
    plt.ylabel('Prix (‚Ç¨)', fontsize=11)
    plt.title('üîç R√©partition des Donn√©es\nPrix vs Kilom√©trage', fontsize=12, fontweight='bold')
    plt.grid(True, alpha=0.3)
    
    # Add data statistics
    stats_text = f'N = {len(mileage)} points\n'
    stats_text += f'Corr√©lation = {np.corrcoef(mileage, actual_prices)[0,1]:.3f}\n'
    stats_text += f'√âtendue km: {np.ptp(mileage):.0f}\n'
    stats_text += f'√âtendue prix: {np.ptp(actual_prices):.0f} ‚Ç¨'
    plt.text(0.02, 0.98, stats_text, transform=ax1.transAxes, fontsize=9,
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    # Mileage distribution
    ax2 = plt.subplot(2, 3, 2)
    n, bins, patches = plt.hist(mileage, bins=12, color='skyblue', alpha=0.7, edgecolor='navy')
    plt.axvline(np.mean(mileage), color='red', linestyle='--', linewidth=2, label=f'Moyenne: {np.mean(mileage):.0f}')
    plt.xlabel('Kilom√©trage (km)', fontsize=11)
    plt.ylabel('Fr√©quence', fontsize=11)
    plt.title('üìä Distribution du Kilom√©trage', fontsize=12, fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Price distribution
    ax3 = plt.subplot(2, 3, 3)
    plt.hist(actual_prices, bins=12, color='lightcoral', alpha=0.7, edgecolor='darkred')
    plt.axvline(np.mean(actual_prices), color='blue', linestyle='--', linewidth=2, label=f'Moyenne: {np.mean(actual_prices):.0f}‚Ç¨')
    plt.xlabel('Prix (‚Ç¨)', fontsize=11)
    plt.ylabel('Fr√©quence', fontsize=11)
    plt.title('üí∞ Distribution des Prix', fontsize=12, fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    print("   ‚úÖ Graphique de r√©partition des donn√©es cr√©√©")
    
    # ========================================================================
    # 2. PLOTTING THE LINEAR REGRESSION LINE
    # ========================================================================
    print("\nüéØ 2. VISUALISATION DE LA LIGNE DE R√âGRESSION LIN√âAIRE")
    print("-" * 55)
    
    # Main regression plot
    ax4 = plt.subplot(2, 3, (4, 6))  # Span bottom row
    
    # Scatter plot of actual data
    plt.scatter(mileage, actual_prices, color='blue', alpha=0.7, s=70, 
               label='üîµ Donn√©es r√©elles', edgecolors='darkblue', linewidth=0.5)
    
    # Create smooth regression line
    km_range = np.linspace(np.min(mileage) - 5000, np.max(mileage) + 5000, 200)
    smooth_predictions = []
    for km in km_range:
        km_normalized = (km - MEAN_KM) / STD_KM
        price_normalized = THETA0 + (THETA1 * km_normalized)
        pred_price = price_normalized * STD_PRICE + MEAN_PRICE
        smooth_predictions.append(pred_price)
    smooth_predictions = np.array(smooth_predictions)
    
    # Plot regression line
    plt.plot(km_range, smooth_predictions, color='red', linewidth=3, 
             label='üî¥ Ligne de r√©gression', alpha=0.9)
    
    # Plot individual predictions
    plt.scatter(mileage, predictions, color='orange', alpha=0.8, s=50,
               label='üü† Pr√©dictions', marker='x', linewidth=2)
    
    # Connect actual to predicted with lines
    for i in range(len(mileage)):
        plt.plot([mileage[i], mileage[i]], [actual_prices[i], predictions[i]], 
                'gray', alpha=0.3, linewidth=1)
    
    plt.xlabel('Kilom√©trage (km)', fontsize=12)
    plt.ylabel('Prix (‚Ç¨)', fontsize=12)
    plt.title('üéØ R√©sultat de la R√©gression Lin√©aire\n' + 
              f'√âquation: prix = f(km_normalis√©) o√π f(x) = {THETA0:.6f} + {THETA1:.6f}√óx',
              fontsize=13, fontweight='bold')
    plt.legend(fontsize=11, loc='upper right')
    plt.grid(True, alpha=0.3)
    
    # Add model information
    model_info = f'Mod√®le entra√Æn√©:\n'
    model_info += f'Œ∏‚ÇÄ = {THETA0:.6f}\n'
    model_info += f'Œ∏‚ÇÅ = {THETA1:.6f}\n\n'
    model_info += f'Normalisation:\n'
    model_info += f'Œº_km = {MEAN_KM:.0f} km\n'
    model_info += f'œÉ_km = {STD_KM:.0f} km\n'
    model_info += f'Œº_prix = {MEAN_PRICE:.0f} ‚Ç¨\n'
    model_info += f'œÉ_prix = {STD_PRICE:.0f} ‚Ç¨'
    
    plt.text(0.02, 0.98, model_info, transform=ax4.transAxes, fontsize=9,
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.9))
    
    plt.tight_layout()
    plt.savefig('../graphs/complete_demonstration.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("   ‚úÖ Graphique de r√©gression lin√©aire cr√©√©")
    print("   üìÅ Sauvegard√©: ../graphs/complete_demonstration.png")
    
    # ========================================================================
    # 3. CALCULATING ALGORITHM PRECISION
    # ========================================================================
    print("\nüî¨ 3. CALCUL DE LA PR√âCISION DE L'ALGORITHME")
    print("-" * 45)
    
    # Calculate comprehensive precision metrics
    errors = actual_prices - predictions
    abs_errors = np.abs(errors)
    
    # Basic metrics
    mae = np.mean(abs_errors)
    mse = np.mean(errors ** 2)
    rmse = np.sqrt(mse)
    mape = np.mean(abs_errors / actual_prices) * 100
    
    # R-squared
    ss_res = np.sum(errors ** 2)
    ss_tot = np.sum((actual_prices - np.mean(actual_prices)) ** 2)
    r_squared = 1 - (ss_res / ss_tot)
    
    # Correlation
    correlation = np.corrcoef(mileage, actual_prices)[0, 1]
    
    # Precision thresholds
    within_500 = np.sum(abs_errors <= 500) / len(errors) * 100
    within_1000 = np.sum(abs_errors <= 1000) / len(errors) * 100
    within_1500 = np.sum(abs_errors <= 1500) / len(errors) * 100
    
    print(f"\nüìä R√âSULTATS DE PR√âCISION:")
    print(f"   ‚Ä¢ Mean Absolute Error (MAE):     {mae:.2f} ‚Ç¨")
    print(f"   ‚Ä¢ Root Mean Squared Error:       {rmse:.2f} ‚Ç¨")
    print(f"   ‚Ä¢ Mean Absolute Percentage:      {mape:.2f} %")
    print(f"   ‚Ä¢ Coefficient R¬≤:                {r_squared:.4f} ({r_squared*100:.1f}%)")
    print(f"   ‚Ä¢ Corr√©lation:                   {correlation:.4f}")
    
    print(f"\nüéØ PR√âCISION PAR SEUILS:")
    print(f"   ‚Ä¢ Pr√©dictions √† ¬±500‚Ç¨:           {within_500:.1f}% ({int(within_500*len(errors)/100)}/{len(errors)})")
    print(f"   ‚Ä¢ Pr√©dictions √† ¬±1000‚Ç¨:          {within_1000:.1f}% ({int(within_1000*len(errors)/100)}/{len(errors)})")
    print(f"   ‚Ä¢ Pr√©dictions √† ¬±1500‚Ç¨:          {within_1500:.1f}% ({int(within_1500*len(errors)/100)}/{len(errors)})")
    
    # Quality assessment
    print(f"\nüìã √âVALUATION DE LA QUALIT√â:")
    if r_squared >= 0.8:
        quality = "üü¢ EXCELLENTE"
    elif r_squared >= 0.6:
        quality = "üü° BONNE"
    elif r_squared >= 0.4:
        quality = "üü† MOD√âR√âE"
    else:
        quality = "üî¥ FAIBLE"
    
    print(f"   ‚Ä¢ Qualit√© globale du mod√®le:     {quality} (R¬≤ = {r_squared:.3f})")
    
    if mape <= 10:
        error_assessment = "üü¢ EXCELLENTE"
    elif mape <= 20:
        error_assessment = "üü° ACCEPTABLE"
    else:
        error_assessment = "üî¥ √âLEV√âE"
    
    print(f"   ‚Ä¢ Erreur pourcentage moyenne:    {error_assessment} ({mape:.1f}%)")
    
    # Best and worst predictions
    best_idx = np.argmin(abs_errors)
    worst_idx = np.argmax(abs_errors)
    
    print(f"\nüèÜ MEILLEURE PR√âDICTION:")
    print(f"   Point #{best_idx+1}: {mileage[best_idx]:.0f}km ‚Üí {actual_prices[best_idx]:.0f}‚Ç¨ (pr√©dit: {predictions[best_idx]:.0f}‚Ç¨, erreur: {abs_errors[best_idx]:.0f}‚Ç¨)")
    
    print(f"\n‚ö†Ô∏è  PIRE PR√âDICTION:")
    print(f"   Point #{worst_idx+1}: {mileage[worst_idx]:.0f}km ‚Üí {actual_prices[worst_idx]:.0f}‚Ç¨ (pr√©dit: {predictions[worst_idx]:.0f}‚Ç¨, erreur: {abs_errors[worst_idx]:.0f}‚Ç¨)")
    
    # Create precision summary plot
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))
    
    # Actual vs Predicted
    ax1.scatter(actual_prices, predictions, alpha=0.7, s=80, color='blue', edgecolors='darkblue')
    min_price = min(np.min(actual_prices), np.min(predictions))
    max_price = max(np.max(actual_prices), np.max(predictions))
    ax1.plot([min_price, max_price], [min_price, max_price], 'r--', linewidth=2, label='Pr√©diction parfaite')
    ax1.set_xlabel('Prix R√©el (‚Ç¨)')
    ax1.set_ylabel('Prix Pr√©dit (‚Ç¨)')
    ax1.set_title(f'üéØ Pr√©dictions vs R√©alit√©\nR¬≤ = {r_squared:.4f}')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Error distribution
    ax2.hist(errors, bins=12, alpha=0.7, color='orange', edgecolor='darkorange')
    ax2.axvline(0, color='red', linestyle='--', linewidth=2, label='Erreur nulle')
    ax2.axvline(np.mean(errors), color='blue', linestyle='--', linewidth=2, label=f'Erreur moyenne: {np.mean(errors):.0f}‚Ç¨')
    ax2.set_xlabel('Erreur (‚Ç¨)')
    ax2.set_ylabel('Fr√©quence')
    ax2.set_title(f'üìä Distribution des Erreurs\nMAE = {mae:.0f}‚Ç¨')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # Absolute errors by data point
    ax3.bar(range(len(abs_errors)), abs_errors, alpha=0.7, color='purple')
    ax3.axhline(mae, color='red', linestyle='--', linewidth=2, label=f'MAE = {mae:.0f}‚Ç¨')
    ax3.set_xlabel('Index des Points')
    ax3.set_ylabel('Erreur Absolue (‚Ç¨)')
    ax3.set_title('üìà Erreurs par Point de Donn√©es')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # Precision metrics summary
    ax4.axis('off')
    metrics_text = f"""
üìã R√âSUM√â DES M√âTRIQUES

üéØ Erreurs:
   MAE:  {mae:.0f} ‚Ç¨
   RMSE: {rmse:.0f} ‚Ç¨
   MAPE: {mape:.1f} %

üìä Qualit√©:
   R¬≤:           {r_squared:.4f}
   Corr√©lation:  {correlation:.4f}

‚úÖ Pr√©cision:
   ¬±500‚Ç¨:  {within_500:.0f}%
   ¬±1000‚Ç¨: {within_1000:.0f}%
   ¬±1500‚Ç¨: {within_1500:.0f}%

üèÜ √âvaluation: {quality.split()[-1]}
"""
    ax4.text(0.1, 0.9, metrics_text, fontsize=12, verticalalignment='top',
            bbox=dict(boxstyle='round,pad=1', facecolor='lightcyan', alpha=0.8))
    
    plt.tight_layout()
    plt.savefig('../graphs/precision_summary.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"\n‚úÖ Analyse de pr√©cision termin√©e")
    print(f"üìÅ Graphique sauvegard√©: ../graphs/precision_summary.png")
    
    # ========================================================================
    # FINAL SUMMARY
    # ========================================================================
    print(f"\nüéâ D√âMONSTRATION COMPL√àTE TERMIN√âE")
    print("=" * 65)
    print(f"‚úÖ 1. R√©partition des donn√©es visualis√©e")
    print(f"‚úÖ 2. Ligne de r√©gression lin√©aire trac√©e")
    print(f"‚úÖ 3. Pr√©cision de l'algorithme calcul√©e")
    print(f"\nüìÅ Graphiques g√©n√©r√©s:")
    print(f"   ‚Ä¢ ../graphs/complete_demonstration.png")
    print(f"   ‚Ä¢ ../graphs/precision_summary.png")
    print(f"\nüèÜ Qualit√© du mod√®le: {quality} (R¬≤ = {r_squared:.3f})")
    print(f"üéØ Erreur moyenne: {mae:.0f}‚Ç¨ ({mape:.1f}%)")

if __name__ == "__main__":
    demonstrate_complete_pipeline()
